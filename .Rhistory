"Government sectors and total nonfarm sectors will not return such statistics."))
}
return(temp_str)
}
a = load("./data/ces_national_codes_list.Rda")
a
load("./data/ces_national_codes_list.Rda")
load("./data/ces_state_codes\_list.Rda")
load("./data/ces_state_codes\_list.Rda")
load("./data/ces_state_codes_list.Rda")
head(ces_state_codes_list)
ces_seriesid(adjustment = c("S"), industries = c("05000000"), data_types = c("01", "03"))
ces_seriesid(adjustment = c("S","U"), industries = "c("00000000"), data_types = c("01"), states = c("1200000"))
ces_seriesid(adjustment = c("S","U"), industries = c("00000000"), data_types = c("01"), states = c("1200000"))
a = ces_seriesid(adjustment = c("S"), industries = c("05000000"), data_types = c("01", "03"))
b = ces_seriesid(adjustment = c("S","U"), industries = c("00000000"), data_types = c("01"), states = c("1200000"))
d = c(a,b)
d
"CE" %in% d+
"CE" %in% d
d
grep("CE",d)
?grep
substr(d,1,2)
"CE" %in% substr(d,1,2)
names(ces_national_codes_list)
adjustment
input = c("S")
valid_inputs = c("S","U")
input = c("S","D")
inputs %in% valid_inputs
input %in% valid_inputs
sum(input %in% valid_inputs)
library(tidyverse)
library(blscrapeR)
inputs = c("S","D")
valid_inputs = c("S", "U")
sum(inputs %in% valid_inputs)
length(inputs)
series_input_okay = function(inputs, valid_inputs) {
if(sum(inputs %in% valid_inputs) != length(inputs)){
FALSE
} else {
TRUE
}
}
series_input_okay(inputs = inputs, valid_inputs = valid_inputs)
inptus = "S"
series_input_okay(inputs = inputs, valid_inputs = valid_inputs)
inputs = "S"
series_input_okay(inputs = inputs, valid_inputs = valid_inputs)
devtools::document()
devtools::document()
?ces_seriesid
ces_national_codes_list
ces_national_state_codes_list
load("./data/ces_national_codes_list.Rda")
okay_series_input = function(inputs, valid_inputs) {
if(sum(inputs %in% valid_inputs) != length(inputs)){
FALSE
} else {
TRUE
}
}
getwd()
okay_ces_seriesid = function(adjustment, industries, data_types, states){
if(missing(adjustment) | missing(industries) | missing(data_types)){
message("Error! Adjustment, industry, and data are required for series!")
return(FALSE)
} else {
load("./data/ces_national_codes_list.Rda")
load("./data/ces_state_codes_list.Rda")
}
if(missing(states)){
if(!(okay_series_input(adjustment, ces_national_codes_list$seasonal_adj))){
message("Error! Seasonal adjustment must be S or U.")
return(FALSE)
}
if(!okay_series_input(industries, ces_national_codes_list$indu_codes)){
message("Error! Invalid industry code.")
return(FALSE)
}
if(!okay_series_input(data_types, ces_national_codes_list$data_types)){
message("Error! Invalid data value.")
return(FALSE)
}
} else {
if(!(okay_series_input(adjustment, ces_state_codes_list$seasonal_adj))){
message("Error! Seasonal adjustment must be S or U.")
return(FALSE)
}
if(!okay_series_input(industries, ces_state_codes_list$indu_codes)){
message("Error! Invalid industry code.")
return(FALSE)
}
if(!okay_series_input(data_types, ces_state_codes_list$data_types)){
message("Error! Invalid data value.")
return(FALSE)
}
if(!okay_series_input(states, ces_state_codes_list$state_codes)){
message("Error! Invalid state codes.")
return(FALSE)
}
}
return(TRUE)
}
devtools::document()
?okay_ces_seriesid
ces_national_codes_list$data_types
ces_state_codes_list$data_types
ces_national_codes_list$indu_codes
ces_state_codes_list$indu_codes
okay_ces_seriesid = function(adjustment, industries, data_types, states){
if(missing(adjustment) | missing(industries) | missing(data_types)){
message("Error! Adjustment, industry, and data are required for series!")
return(FALSE)
} else {
load("./data/ces_national_codes_list.Rda")
load("./data/ces_state_codes_list.Rda")
}
if(missing(states)){
if(!(okay_series_input(adjustment, ces_national_codes_list$seasonal_adj))){
message("Error! Seasonal adjustment must be S or U.")
return(FALSE)
}
if(!okay_series_input(industries, ces_national_codes_list$indu_codes)){
message("Error! Invalid industry code.")
return(FALSE)
}
if(!okay_series_input(data_types, ces_national_codes_list$data_types)){
message("Error! Invalid data value.")
return(FALSE)
}
} else {
if(!(okay_series_input(adjustment, ces_state_codes_list$seasonal_adj))){
message("Error! Seasonal adjustment must be S or U.")
return(FALSE)
}
if(!okay_series_input(industries, ces_state_codes_list$indu_codes)){
message("Error! Invalid industry code.")
return(FALSE)
}
if(!okay_series_input(data_types, ces_state_codes_list$data_types)){
message("Error! Invalid data value.")
return(FALSE)
}
if(!okay_series_input(states, ces_state_codes_list$state_codes)){
message("Error! Invalid state codes.")
return(FALSE)
}
}
if(
return(TRUE)
}
if(missing(adjustment) | missing(industries) | missing(data_types)){
message("Error! Adjustment, industry, and data are required for series!")
return(FALSE)
} else {
load("./data/ces_national_codes_list.Rda")
load("./data/ces_state_codes_list.Rda")
}
okay_ces_seriesid = function(adjustment, industries, data_types, states){
if(missing(adjustment) | missing(industries) | missing(data_types)){
message("Error! Adjustment, industry, and data are required for series!")
return(FALSE)
} else {
load("./data/ces_national_codes_list.Rda")
load("./data/ces_state_codes_list.Rda")
}
if(missing(states)){
if(!(okay_series_input(adjustment, ces_national_codes_list$seasonal_adj))){
message("Error! Seasonal adjustment must be S or U.")
return(FALSE)
}
if(!okay_series_input(industries, ces_national_codes_list$indu_codes)){
message("Error! Invalid industry code.")
return(FALSE)
}
if(!okay_series_input(data_types, ces_national_codes_list$data_types)){
message("Error! Invalid data value.")
return(FALSE)
}
} else {
if(!(okay_series_input(adjustment, ces_state_codes_list$seasonal_adj))){
message("Error! Seasonal adjustment must be S or U.")
return(FALSE)
}
if(!okay_series_input(industries, ces_state_codes_list$indu_codes)){
message("Error! Invalid industry code.")
return(FALSE)
}
if(!okay_series_input(data_types, ces_state_codes_list$data_types)){
message("Error! Invalid data value.")
return(FALSE)
}
if(!okay_series_input(states, ces_state_codes_list$state_codes)){
message("Error! Invalid state codes.")
return(FALSE)
}
}
return(TRUE)
}
adjustment = "S"
ces_national_codes_list$indu_codes
industries = c("00000000", "05000000")
data_types = c("01", "02")
ces_national_codes_list$data_types
data_types = c("01"0
data_types = c("01")
okay_ces_seriesid(adjustment, industries, data_types)
adjustment
okay_series_input(adjustment, ces_national_codes_list$seasonal_adj)
ces_national_codes_list$seasonal_adj
ces_national_codes_list$indu_codes$industry_code
ces_state_codes_list$state_codes$state_code
okay_ces_seriesid = function(adjustment, industries, data_types, states){
if(missing(adjustment) | missing(industries) | missing(data_types)){
message("Error! Adjustment, industry, and data are required for series!")
return(FALSE)
} else {
load("./data/ces_national_codes_list.Rda")
load("./data/ces_state_codes_list.Rda")
}
if(missing(states)){
if(!(okay_series_input(adjustment, ces_national_codes_list$seasonal_adj$seasonal_code))){
message("Error! Seasonal adjustment must be S or U.")
return(FALSE)
}
if(!okay_series_input(industries, ces_national_codes_list$indu_codes$industry_code)){
message("Error! Invalid industry code.")
return(FALSE)
}
if(!okay_series_input(data_types, ces_national_codes_list$data_types$data_type_code)){
message("Error! Invalid data value.")
return(FALSE)
}
} else {
if(!(okay_series_input(adjustment, ces_state_codes_list$seasonal_adj$seasonal_code))){
message("Error! Seasonal adjustment must be S or U.")
return(FALSE)
}
if(!okay_series_input(industries, ces_state_codes_list$indu_codes$industry_code)){
message("Error! Invalid industry code.")
return(FALSE)
}
if(!okay_series_input(data_types, ces_state_codes_list$data_types$data_type_code)){
message("Error! Invalid data value.")
return(FALSE)
}
if(!okay_series_input(states, ces_state_codes_list$state_codes$state_code)){
message("Error! Invalid state codes.")
return(FALSE)
}
}
return(TRUE)
}
okay_series_input(adjustment, ces_national_codes_list$seasonal_adj)
okay_series_input(adjustment, ces_national_codes_list$seasonal_adj$seasonal_code)
okay_ces_seriesid(adjustment, industries, data_types)
adjustmnet = "D"
okay_ces_seriesid(adjustment, industries, data_types)
adjustment
adjustment = "D"
okay_ces_seriesid(adjustment, industries, data_types)
okay_ces_seriesid(adjustment, industries, data_types, states)
adjustment = "S"
okay_ces_seriesid(adjustment, industries, data_types, states)
staets
states
head(ces_seriesids)
head(ces_seriesid)
ces_seriesid(adjustment, industries, data_types)
head(bls_download()
head(bls_download)
bls_download(seriesid, start_year, end_year, bls_key)
bls_key = Sys.getenv("BLS_KEY")
bls_key
start_year = 2010
data_types
end_year = 2015
bls_download(seriesid, start_year, end_year, bls_key)
seriesid = ces_seriesid(adjustment, industries, data_types)
bls_download(seriesid, start_year, end_year, bls_key)
bls_download(seriesid, start_year, end_year, bls_key)
temp_df = bls_download(seriesid, start_year, end_year, bls_key)
head(temp_df)
table(temp_df$seriesID)
ces_national_codes_list$series_id_map
library(tidyverse)
library(blscrapeR)
load("./data/ces_national_codes_list.Rda")
load("./data/ces_state_codes_list.Rda")
indu_choice = (ces_national_codes_list$indu_codes %>%
filter(level == 2, private_sector_flag == 1))$industry_code
seasonal_adj = "S"
data_types = (ces_national_codes_list$data_types %>%
filter(data_type_code %in% c("01", "03", "11")))$data_type_code
state_choices = (ces_state_codes_list$state_codes %>%
filter(state_id %in% c("NV", "CA", "UT")))$state_code
head(okay_ces_seriesid)
ces_seriesid = function(adjustment, industries, data_types, states) {
if(missing(states)) {
temp_str = apply(expand.grid(c("CE"), adjustment, industries, data_types),
1,
FUN = function(x) { paste(x, collapse = "", sep = "") })
} else {
temp_str = apply(expand.grid(c("SM"), adjustment, states, industries, data_types),
1,
FUN = function(x) { paste(x, collapse = "", sep = "") })
}
if(length(temp_str)>50){
message("Warning! BLS API only allows 50 series per query with an API key. Please reduce!")
}
if((sum(data_types %in% c("03","11", "56", "57"))!=0) &
(sum(industries %in% c("00000000","90000000"))!=0)) {
message(paste("Warning! BLS only has wage and earnings statistics for the private sector.",
"Government sectors and total nonfarm sectors will not return such statistics."))
}
return(temp_str)
}
okay_ces_seriesid = function(adjustment, industries, data_types, states){
if(missing(adjustment) | missing(industries) | missing(data_types)){
message("Error! Adjustment, industry, and data are required for series!")
return(FALSE)
} else {
load("./data/ces_national_codes_list.Rda")
load("./data/ces_state_codes_list.Rda")
}
if(missing(states)){
if(!(okay_series_input(adjustment, ces_national_codes_list$seasonal_adj$seasonal_code))){
message("Error! Seasonal adjustment must be S or U.")
return(FALSE)
}
if(!okay_series_input(industries, ces_national_codes_list$indu_codes$industry_code)){
message("Error! Invalid industry code.")
return(FALSE)
}
if(!okay_series_input(data_types, ces_national_codes_list$data_types$data_type_code)){
message("Error! Invalid data value.")
return(FALSE)
}
} else {
if(!(okay_series_input(adjustment, ces_state_codes_list$seasonal_adj$seasonal_code))){
message("Error! Seasonal adjustment must be S or U.")
return(FALSE)
}
if(!okay_series_input(industries, ces_state_codes_list$indu_codes$industry_code)){
message("Error! Invalid industry code.")
return(FALSE)
}
if(!okay_series_input(data_types, ces_state_codes_list$data_types$data_type_code)){
message("Error! Invalid data value.")
return(FALSE)
}
if(!okay_series_input(states, ces_state_codes_list$state_codes$state_code)){
message("Error! Invalid state codes.")
return(FALSE)
}
}
return(TRUE)
}
ces_download = function(bls_key, start_year, end_year, adjustment, industries, data_types, states){
if(missing(states)){
if(okay_ces_seriesid(adjustment, industries, data_types)){
seriesid = ces_seriesid(adjustment, industries, data_types)
temp_df = bls_download(seriesid, start_year, end_year, bls_key)
} else {
stop("Error! Invalid inputs. See function okay_ces_seriesid.")
}
} else {
if(okay_ces_seriesid(adjustment, industries, data_types, states)){
seriesid = ces_seriesid(adjustment, industries, data_types, states)
temp_df = bls_download(seriesid, start_year, end_year, bls_key)
} else {
stop("Error! Invalid inputs. See function okay_ces_seriesid.")
}
}
temp_df = bls_download(seriesid, start_year, end_year, bls_key)
}
bls_download = function(seriesid, start_year, end_year, bls_key){
if(length(seriesid)>50){
stop("Error! Cannot process more than 50 series IDs at one time!")
}
if(missing(bls_key)){
stop("Error! Please provide a valid BLS API key.")
}
temp_df = blscrapeR::bls_api(seriesid = seriesid,
startyear = start_year,
endyear = end_year,
registrationKey = bls_key)
temp_df %>% blscrapeR::dateCast()
}
okay_series_input = function(inputs, valid_inputs) {
if(sum(inputs %in% valid_inputs) != length(inputs)){
FALSE
} else {
TRUE
}
}
head(okay_ces_seriesid()
head(okay_ces_seriesid)
seasonal_adj
indu_choice
okay_ces_seriesid(adjustment = seasonal_adj,
industries = indu_choice,
data_types = data_types)
okay_ces_seriesid(adjustment = seasonal_adj,
industries = indu_choice,
data_types = data_types,
states = state_choices)
okay_ces_seriesid(adjustment = seasonal_adj,
industries = indu_choice[1:2],
data_types = data_types,
states = state_choices)
temp_df = bls_download(seriesid, start_year, end_year, bls_key)
return(temp_df)
ces_download = function(bls_key, start_year, end_year, adjustment, industries, data_types, states){
if(missing(states)){
if(okay_ces_seriesid(adjustment, industries, data_types)){
seriesid = ces_seriesid(adjustment, industries, data_types)
temp_df = bls_download(seriesid, start_year, end_year, bls_key)
} else {
stop("Error! Invalid inputs. See function okay_ces_seriesid.")
}
} else {
if(okay_ces_seriesid(adjustment, industries, data_types, states)){
seriesid = ces_seriesid(adjustment, industries, data_types, states)
temp_df = bls_download(seriesid, start_year, end_year, bls_key)
} else {
stop("Error! Invalid inputs. See function okay_ces_seriesid.")
}
}
temp_df = bls_download(seriesid, start_year, end_year, bls_key)
return(temp_df)
}
temp_df = ces_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = seasonal_adj,
industries = indu_choice,
data_types = data_types)
head(temp_df)
temp_df = ces_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = seasonal_adj,
industries = indu_choice,
data_types = data_types)
ces_download = function(bls_key, start_year, end_year, adjustment, industries, data_types, states){
if(missing(states)){
if(okay_ces_seriesid(adjustment, industries, data_types)){
seriesid = ces_seriesid(adjustment, industries, data_types)
} else {
stop("Error! Invalid inputs. See function okay_ces_seriesid.")
}
} else {
if(okay_ces_seriesid(adjustment, industries, data_types, states)){
seriesid = ces_seriesid(adjustment, industries, data_types, states)
} else {
stop("Error! Invalid inputs. See function okay_ces_seriesid.")
}
}
temp_df = bls_download(seriesid, start_year, end_year, bls_key)
return(temp_df)
}
temp_df = ces_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = seasonal_adj,
industries = indu_choice,
data_types = data_types)
table(temp_df$seriesID)
head(temp_df)
data_types
ces_national_codes_list$indu_codes
temp_df = ces_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = seasonal_adj,
industries = "00000000",
data_types = data_types)
table(temp_df$seriesID)
temp_df = ces_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = seasonal_adj,
industries = indu_choice,
data_types = data_types)
bls_df
bls_df = temp_df
devtools::document()
?ces_download
devtools::create()
usethis::create()
usethis::create_package()
search()
?usethis::create_package
?user_path_prep
usethis::create_package()
usethis::create_package(path = ".")
library(devtools)
getwd()
devtools::load_all()
devtools::create('~/blsr')
getwd()
devtools::document()
devtools::document()
usethis::create_package()
usethis::create_package(path = ".")
usethis::create_package(path = "~/blsr")
head(bls_df)
usethis::use_package("lubridate")

head(b)
head(b %>% data.frame())
temp_df = ces_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = seasonal_adj,
industries = indu_choice,
data_types = data_types,
clean = FALSE)
ces_download = function(bls_key, start_year, end_year, adjustment, industries, data_types, states,
clean = TRUE){
if(missing(states)){
if(okay_ces_seriesid(adjustment, industries, data_types)){
seriesid = ces_seriesid(adjustment, industries, data_types)
} else {
stop("Error! Invalid inputs. See function okay_ces_seriesid.")
}
} else {
if(okay_ces_seriesid(adjustment, industries, data_types, states)){
seriesid = ces_seriesid(adjustment, industries, data_types, states)
} else {
stop("Error! Invalid inputs. See function okay_ces_seriesid.")
}
}
bls_df = bls_download(seriesid, start_year, end_year, bls_key)
if(clean == TRUE){
if(missing(states)){
clean_ces_national(bls_df)
} else {
clean_ces_state(bls_df)
}
} else {
bls_df
}
}
temp_df = ces_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = seasonal_adj,
industries = indu_choice,
data_types = data_types,
clean = FALSE)
dim(temp_df)
dim(a)
head(temp_df)
temp_df_clean = clean_ces_national(temp_df)
dim(temp_df_clean)
head(temp_df_clean %>% data.frame())
state_series
state_choices
temp_df = ces_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = seasonal_adj,
industries = indu_choice[1:2],
data_types = data_types,
states = state_choices,
clean = FALSE)
dim(temp_df)
table(temp_df$seriesID)
head(temp_df)
ces_state_codes_list$series_id_map
ces_state_codes_list$state_codes
temp_df = ces_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = seasonal_adj,
industries = indu_choice[1:2],
data_types = data_types,
states = state_choices,
clean = FALSE)
bls_df = temp_df0
dim(bls_df)
bls_df = temp_df
dim(bls_df)
bls_df = bls_df %>%
dplyr::mutate(archive = lubridate::year(date)*100 + lubridate::month(date),
seasonal_code = substr(seriesID, 3, 3),
seasonal_code = ifelse( seasonal_code == "S",
"seasonally adjusted",
"unadjusted"),
state_code = substr(seriesID, 4, 10),
indu_code = substr(seriesID, 11, 18),
data_type_code = substr(seriesID, 19, 20))
head(bls_df)
bls_df = bls_df %>%
dplyr::left_join( y = ces_state_codes_list$state_codes %>%
dplyr::filter(in_us_flag == 1) %>%
dplyr::rename(state_name = description) %>%
dplyr::select(state_code, state_name, state_id),
by = c("state_code" = "state_code")) %>%
dplyr::left_join( y = ces_state_codes_list$indu_codes %>%
dplyr::rename(industry_name = description,
industry_level = level) %>%
dplyr::select(industry_code,
industry_name,
industry_level,
private_sector_flag,
naics_sector_code),
by = c("indu_code" = "industry_code")) %>%
dplyr::left_join( y = ces_state_codes_list$data_types %>%
dplyr::rename(variable_name = description),
by = c("data_type_code" = "data_type_code"))
head(bls_df %>% data.frame())
table(bls_df$state_id)
state_choices
bls_df = bls_df %>%
dplyr::left_join( y = naics_industry_mappings$ces_to_naics_map %>%
dplyr::select(industry_code,
naics_supersector_code,
naics_supersector_name),
by = c("indu_code"="industry_code"))
names(bls_df)
bls_df = bls_df %>%
dplyr::mutate(month = as.numeric(gsub("M", "", period))) %>%
dplyr::select(archive, month, period, seriesID, state_name, state_id,
variable_name, value, seasonal_code,
industry_name, industry_level, private_sector_flag,
naics_sector_code, naics_supersector_code, naics_supersector_name )
head(bls_df %>% data.frame())
View(bls_df)
# Cleans the CES state database to a usable format
clean_ces_state = function(bls_df) {
load("./data/ces_state_codes_list.Rda")
bls_df = bls_df %>%
dplyr::mutate(archive = lubridate::year(date)*100 + lubridate::month(date),
seasonal_code = substr(seriesID, 3, 3),
seasonal_code = ifelse( seasonal_code == "S",
"seasonally adjusted",
"unadjusted"),
state_code = substr(seriesID, 4, 10),
indu_code = substr(seriesID, 11, 18),
data_type_code = substr(seriesID, 19, 20))
bls_df = bls_df %>%
dplyr::left_join( y = ces_state_codes_list$state_codes %>%
dplyr::filter(in_us_flag == 1) %>%
dplyr::rename(state_name = description) %>%
dplyr::select(state_code, state_name, state_id),
by = c("state_code" = "state_code")) %>%
dplyr::left_join( y = ces_state_codes_list$indu_codes %>%
dplyr::rename(industry_name = description,
industry_level = level) %>%
dplyr::select(industry_code,
industry_name,
industry_level,
private_sector_flag,
naics_sector_code),
by = c("indu_code" = "industry_code")) %>%
dplyr::left_join( y = ces_state_codes_list$data_types %>%
dplyr::rename(variable_name = description),
by = c("data_type_code" = "data_type_code"))
bls_df = bls_df %>%
dplyr::left_join( y = naics_industry_mappings$ces_to_naics_map %>%
dplyr::select(industry_code,
naics_supersector_code,
naics_supersector_name),
by = c("indu_code"="industry_code"))
bls_df = bls_df %>%
dplyr::mutate(month = as.numeric(gsub("M", "", period))) %>%
dplyr::select(archive, month, period, seriesID, state_name, state_id,
variable_name, value, seasonal_code,
industry_name, industry_level, private_sector_flag,
naics_sector_code, naics_supersector_code, naics_supersector_name )
bls_df
}
# Cleans the CES national database to a usable format
clean_ces_national = function(bls_df) {
load("./data/ces_national_codes_list.Rda")
bls_df = bls_df %>%
dplyr::mutate(archive = lubridate::year(date)*100 + lubridate::month(date),
seasonal_code = substr(seriesID, 3, 3),
seasonal_code = ifelse( seasonal_code == "S",
"seasonally adjusted",
"unadjusted"),
indu_code = substr(seriesID, 4, 11),
data_type_code = substr(seriesID, 12, 13))
bls_df = bls_df %>%
dplyr::left_join( y = ces_national_codes_list$indu_codes %>%
dplyr::rename(industry_name = description,
industry_level = level) %>%
dplyr::select(industry_code,
industry_name,
industry_level,
private_sector_flag,
naics_sector_code),
by = c("indu_code" = "industry_code")) %>%
dplyr::left_join( y = ces_national_codes_list$data_types %>%
dplyr::rename(variable_name = description),
by = c("data_type_code" = "data_type_code"))
bls_df = bls_df %>%
dplyr::left_join( y = naics_industry_mappings$ces_to_naics_map %>%
dplyr::select(industry_code,
naics_supersector_code,
naics_supersector_name),
by = c("indu_code"="industry_code"))
bls_df = bls_df %>%
dplyr::mutate(month = as.numeric(gsub("M", "", period))) %>%
dplyr::select(archive, month, period, seriesID, variable_name, value, seasonal_code,
industry_name, industry_level, private_sector_flag,
naics_sector_code, naics_supersector_code, naics_supersector_name )
bls_df
}
naics_industry_mappings
load("./data/jolts_codes_list.Rda")
names(jolts_codes_list)
devtools::load_all()
usethis::document()
use_this::document()
devtools::document(0
devtools::document()
devtools::load_all()
?bls_download
use_this::usethis::use_build_ignore(".gitignore")
use_this::usethis::use_build_ignore("README.md")
use_this::use_build_ignore("README.md")
usethis::use_build_ignore("README.md"0
usethis::use_build_ignore("README.md")
usethis::use_build_ignore(".git")
usethis::use_build_ignore(".github")
usethis::use_build_ignore(".gitignore")
temp_df = ces_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = seasonal_adj,
industries = indu_choice[1:2],
data_types = data_types,
states = state_choices,
clean = FALSE)
temp_df_clean = clean_ces_state(temp_df)
head(temp_df_clean %>% data.frame())
all.equal(temp_df = ces_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = seasonal_adj,
industries = indu_choice[1:2],
data_types = data_types,
states = state_choices,
clean = TRUE),
temp_df_clean_)
all.equal(temp_df = ces_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = seasonal_adj,
industries = indu_choice[1:2],
data_types = data_types,
states = state_choices,
clean = TRUE),
temp_df_clean)
alt_df = ces_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = seasonal_adj,
industries = indu_choice[1:2],
data_types = data_types,
states = state_choices,
clean = FALSE)
alt_df = ces_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = seasonal_adj,
industries = indu_choice[1:2],
data_types = data_types,
states = state_choices,
clean = TRUE)
all.equal(temp_df_clean, alt_df)
temp_df = ces_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = seasonal_adj,
industries = indu_choice,
data_types = data_types,
clean = FALSE)
temp_df_clean = clean_ces_national(temp_df)
alt_df = ces_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = seasonal_adj,
industries = indu_choice,
data_types = data_types,
clean = TRUE)
all.equal(temp_df_clean, alt_df)
jolts_codes_list
# Load the JOLTS metadata
load("./data/jolts_codes_list.Rda")
# Parameter Choices
seasonal_adj = "S"
indu_choice = (jolts_codes_list$indu_codes %>%
filter(level == 2, private_sector_flag == 1))$industry_code
data_types = c("HI")
data_levels = c("L")
region_series = c("MW", "NE")
#Test series extraction functions
national_seriesid = jolts_seriesid(adjustment = seasonal_adj,
industries = indu_choice,
data_types = data_types,
data_levels = data_levels)
jolts_codes_list$series_id_map
jolts_codes_list$rate_level_codes
okay_jolts_seriesid = function(adjustment, industries, data_types, data_levels, regions){
if(missing(adjustment) | missing(industries) | missing(data_types) | missing(data_levels)){
message("Error! Adjustment, industry, and data are required for series!")
return(FALSE)
} else {
load("./data/jolts_codes_list.Rda")
}
if(missing(regions)){
if(!(okay_series_input(adjustment, jolts_codes_list$seasonal_adj$seasonal_code))){
message("Error! Seasonal adjustment must be S or U.")
return(FALSE)
}
if(!okay_series_input(industries, jolts_codes_list$indu_codes$industry_code)){
message("Error! Invalid industry code.")
return(FALSE)
}
if(!okay_series_input(data_types, jolts_codes_list$element_codes$dataelement_code)){
message("Error! Invalid data value.")
return(FALSE)
}
if(!okay_series_input(data_levels, jolts_codes_list$rate_level_codes$ratelevel_code)){
message("Error! Level must be L or R.")
return(FALSE)
}
} else {
if(!(okay_series_input(adjustment, jolts_codes_list$seasonal_adj$seasonal_code))){
message("Error! Seasonal adjustment must be S or U.")
return(FALSE)
}
if(!okay_series_input(industries, jolts_codes_list$indu_codes$industry_code)){
message("Error! Invalid industry code.")
return(FALSE)
}
if(!okay_series_input(data_types, jolts_codes_list$element_codes$dataelement_code)){
message("Error! Invalid data value.")
return(FALSE)
}
if(!okay_series_input(data_levels, jolts_codes_list$rate_level_codes$ratelevel_code)){
message("Error! Level must be L or R.")
return(FALSE)
}
if(!okay_series_input(regions, jolts_codes_list$region_codes$region_code)){
message("Error! Invalid region codes.")
return(FALSE)
}
}
return(TRUE)
}
devtools::document()
?jolts_download
# Cleans the JOLTS database to a usable format
clean_jolts = function(bls_df) {
load("./data/jolts_codes_list.Rda")
load("./data/naics_industry_mappings")
bls_df = bls_df %>%
dplyr::mutate( archive = lubridate::year(date)*100+lubridate::month(date),
seasonal_code = substr(seriesID, 3, 3),
seasonal_code = ifelse( seasonal_code == "S", "seasonally adjusted", "unadjusted"),
indu_code = substr(seriesID, 4, 9),
element_code = substr(seriesID, 12, 13),
region_code = substr(seriesID, 10, 11) ) %>%
dplyr::left_join( y = jolts_codes$region_codes %>%
dplyr::rename(region_name = description),
by = c("region_code"="region_code") ) %>%
dplyr::left_join( y = jolts_codes$element_codes %>%
dplyr::rename(variable_name = description) %>%
dplyr::select(dataelement_code, variable_name),
by = c("element_code"="dataelement_code") ) %>%
dplyr::left_join( y = jolts_codes$indu_codes %>%
dplyr::rename(industry_name = description) %>%
dplyr::select(industry_code, industry_name),
by = c("indu_code"="industry_code") )
jolts_df = jolts_df %>%
dplyr::left_join( y = get_jolts_naics_map(bls_dir) %>%
dplyr::select(-one_of("level", "description")),
by = c("indu_code"="industry_code") )
jolts_df = jolts_df %>%
dplyr::select( archive, year, period, seriesID, value, variable_name,
industry_name, region_name, seasonal_code, private_sector_flag,
naics_supersector_code, naics_supersector_name )
}
devtools::load_all()
getwd()
library(tidyverse)
library(blscrapeR)
library(lubridate)
library(devtools)
library(devtools)
vignette("dplyr")
devtools::use_vignette("blsr")
library(devtools)
library(tidyverse)
devtools::load_all()
vignette("blsr")
vignette("blsr")
vignette("dplyr")
ces_national_codes_list
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
ces_national_codes_list$series_id_map
getwd(0
getwd()
devtools::load_all(""C:/Users/dsovich/Dropbox/Programming/Packages/blsr")
devtools::load_all("C:/Users/dsovich/Dropbox/Programming/Packages/blsr")
knitr::kable(ces_national_codes_list$series_id_map)
knitr::kable(ces_national_codes_list$data_types, caption = "Data items available for CES national database")
?ces_download
ces_df = ces_download(bls_key = Sys.getenv("BLS_KEY"),
end_year = 2018,
adjustment = "S",
data_types = "01")
Sys.getenv("BLS_KEY")
# Parameter choices
indu_choice = (ces_national_codes_list$indu_codes %>%
filter(level == 2, private_sector_flag == 1))$industry_code
seasonal_adj = "S"
data_types = (ces_national_codes_list$data_types %>%
filter(data_type_code %in% c("01", "03", "11")))$data_type_code
state_choices = (ces_state_codes_list$state_codes %>%
filter(state_id %in% c("NV", "CA", "UT")))$state_code
# Test series extraction functions
national_seriesid = ces_seriesid(adjustment = seasonal_adj,
industries = indu_choice,
data_types = data_types)
temp_df = ces_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = seasonal_adj,
industries = indu_choice,
data_types = data_types,
clean = FALSE)
library(blscrapeR)
temp_df = ces_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = seasonal_adj,
industries = indu_choice,
data_types = data_types,
clean = FALSE)
library(tidyverse)
library(blscrapeR)
library(lubridate)
library(devtools)
# Load the JOLTS metadata
load("./data/jolts_codes_list.Rda")
# Parameter Choices
seasonal_adj = "S"
indu_choice = (jolts_codes_list$indu_codes %>%
filter(level == 2, private_sector_flag == 1))$industry_code
data_types = c("HI")
data_levels = c("L")
region_series = c("MW", "NE")
#Test series extraction functions
national_seriesid = jolts_seriesid(adjustment = seasonal_adj,
industries = indu_choice,
data_types = data_types,
data_levels = data_levels)
regional_seriesid = jolts_seriesid(adjustment = seasonal_adj,
industries = indu_choice,
data_types = data_types,
data_levels = data_levels,
regions = region_series)
bls_download(seriesid = national_seriesid, start_year = 2006, end_year = 2007, bls_key = Sys.getenv("BLS_KEY"))
df <- bls_api(c("LNS12000000", "LNS13000000", "LNS14000000"),
startyear = 2008, endyear = 2017, Sys.getenv("BLS_KEY")) %>%
# Add time-series dates
dateCast()
df
okay_ces_seriesid(adjustment = "S",
industries = "00000000",
data_types = "01")
ces_downoad
ces_download
ces_df = ces_download(bls_key = Sys.getenv("BLS_KEY"),
end_year = 2018,
adjustment = "S",
industries = "00000000",
data_types = "01")
getwd()
adjustment = "S"
industries = "00000000"
data_types = "01"
if(okay_ces_seriesid(adjustment, industries, data_types)){
seriesid = ces_seriesid(adjustment, industries, data_types)
} else {
stop("Error! Invalid inputs. See function okay_ces_seriesid.")
}
okay_ces_seriesid(adjustment, industries, data_types)
start_year = 2010
end_year = 2015
bls_key = Sys.getenv("BLS_KEY")
bls_df = bls_download(seriesid, start_year, end_year, bls_key)
df <- bls_api(c("LNS12000000", "LNS13000000", "LNS14000000"),
startyear = 2008, endyear = 2017) %>%
# Add time-series dates
dateCast()
library(devtools)
install_github("mikeasilva/blsAPI")
library(blsAPI)
response <- blsAPI('LAUCN040010000000005')
?blsAPI
devtools::use_readme_rmd()
library(tidyverse)
library(blscrapeR)
library(devtools)
devtools::load_all("C:/Users/Dropbox/Programming/Packages/blsr")
devtools::load_all("C:/Users/dsovich/Dropbox/Programming/Packages/blsr")
devtools::install_github("jcizel/FredR")
readRenviron
readRenviron ()
readRenviron(...)
readRenviron("...")

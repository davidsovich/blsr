data_levels = "L")
jolts_df = jolts_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = "S",
industries = "000000",
data_types = c("HI", "JO", "TS", "UN", "UO"),
data_levels = "L")
jolts_df = jolts_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = "S",
industries = "000000",
data_types = c("UN"),
data_levels = "L")
jolts_df = jolts_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = "S",
industries = "000000",
data_types = c("UO"),
data_levels = "L")
jolts_df = jolts_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = "S",
industries = "000000",
data_types = c("HI", "JO", "TS"),
data_levels = "L")
table(jolts_df$variable_name)
jolts_df = jolts_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = "U",
industries = "000000",
data_types = c("UN"),
data_levels = "L")
jolts_df = jolts_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = "S",
industries = "000000",
data_types = c("UN"),
data_levels = "R")
jolts_codes_list = list( prefix = "JT",
seasonal_adj = readr::read_csv(file="./data-raw/seasonal_adjustment_definitions.csv"),
indu_codes = readr::read_csv(file="./data-raw/jolts_industry_definitions.csv"),
region_codes = readr::read_csv(file="./data-raw/jolts_region_definitions.csv"),
rate_level_codes = readr::read_csv(file="./data-raw/jolts_rate_level_definitions.csv"),
element_codes = readr::read_csv(file="./data-raw/jolts_data_element_definitions.csv"),
series_id_map = readr::read_csv(file="./data-raw/jolts_series_id_map.csv"))
jolts_codes_list
usethis::use_data(jolts_codes_list, overwrite = TRUE)
jolts_df = jolts_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = "S",
industries = "000000",
data_types = c("HI", "JO", "TS"),
data_levels = "L")
head(jolts_df)
table(jolts_df$variable_name)
jolts_df = jolts_df %>%
mutate(variable_name = ifelse(variable_name == "Hires",
"usa_hires",
ifelse(variable_name == "Job openings",
"usa_openings", "usa_separatoins") %>%
select(archive, variable_name, value)
jolts_df = jolts_df %>%
mutate(variable_name = ifelse(variable_name == "Hires",
"usa_hires",
ifelse(variable_name == "Job openings",
"usa_openings", "usa_separatoins"))) %>%
select(archive, variable_name, value)
table(jolts_df$variable_name)
?dcast
dcast(jolts_df, archive ~ variable_name)
head(dcast(jolts_df, archive ~ variable_name))
jolts_df = jolts_df %>% dcast(archive ~ variable_name)
head(jolts_df)
seasonal_adj = readr::read_csv(file = "./data-raw/seasonal_adjustment_definitions.csv"),
laus_codes_list = list( prefix = "LA",
seasonal_adj = readr::read_csv(file = "./data-raw/seasonal_adjustment_definitions.csv"),
state_codes = readr::read_csv(file = "./data-raw/laus_state_codes.csv"),
data_type_codes = readr::read_csv(file = "./data-raw/laus_data_type_definitions.csv"),
series_id_map = readr::read_csv(file = "./data-raw/laus_series_id_map.csv"))
laus_codes_list = list( prefix = "LA",
seasonal_adj = readr::read_csv(file = "./data-raw/seasonal_adjustment_definitions.csv"),
state_codes = readr::read_csv(file = "./data-raw/laus_state_codes.csv"),
data_type_codes = readr::read_csv(file = "./data-raw/laus_data_type_definitions.csv"),
series_id_map = readr::read_csv(file = "./data-raw/laus_series_id_map.csv"))
laus_codes_list
laus_codes_list = list( prefix = "LA",
seasonal_adj = readr::read_csv(file = "./data-raw/seasonal_adjustment_definitions.csv"),
state_codes = readr::read_csv(file = "./data-raw/laus_state_codes.csv"),
data_type_codes = readr::read_csv(file = "./data-raw/laus_data_type_definitions.csv"),
series_id_map = readr::read_csv(file = "./data-raw/laus_series_id_map.csv"))
usethis::use_data(laus_codes_list, overwrite = TRUE)
laus_codes_list
usethis::use_data(laus_codes_list, overwrite = TRUE)
usethis::use_data(laus_codes_list, overwrite = TRUE)
adjustment = "S"
laus_codes_list$state_codes
states = c("ST0100000000000", "ST0200000000000")
laus_codes_list$data_type_codes
data_types = c("03", "04", "05")
temp_str = apply(expand.grid(c("LA"), adjustment, states, data_types),
1,
FUN = function(x) { paste(x, collapse = "", sep = "") })
temp_str
devtools::document()
?laus_seriesid
devtools::load_all()
laus_codes_list$data_type_codes$data_type_code
devtools::document()
?okay_laus_seriesid
knitr::kable(laus_codes_list$series_id_map, caption = "Series ID string for LAUS database")
laus_df = laus_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = "S",
states = c("ST0100000000000", "ST0200000000000"),
data_types = c("03"))
head(laus_df)
laus_codes_list
laus_codes_list$state_codes
laus_codes_list = list( prefix = "LA",
seasonal_adj = readr::read_csv(file = "./data-raw/seasonal_adjustment_definitions.csv"),
state_codes = readr::read_csv(file = "./data-raw/laus_state_codes.csv"),
data_type_codes = readr::read_csv(file = "./data-raw/laus_data_type_definitions.csv"),
series_id_map = readr::read_csv(file = "./data-raw/laus_series_id_map.csv"))
usethis::use_data(laus_codes_list, overwrite = TRUE)
laus_codes_list$state_codes
head(laus_df)
bls_df = laus_df
bls_df = bls_df %>%
dplyr::mutate(archive = lubridate::year(date)*100 + lubridate::month(date),
seasonal_code = substr(seriesID, 3, 3),
seasonal_code = ifelse( seasonal_code == "S",
"seasonally adjusted",
"unadjusted"),
state_code = substr(seriesID, 4, 18),
data_type_code = substr(seriesID, 19, 20))
head(bls_df %>% data.frame())
laus_codes_list$data_type_codes
bls_df = bls_df %>%
dplyr::left_join(y = laus_codes_list$state_codes %>%
filter(in_us_flag == 1),
by = c("state_code"="state_code")) %>%
dplyr::left_join(y = laus_codes_list$data_type_codes,
by = c("data_type_code" = "data_type_code"))
head(bls_df %>% data.frame())
table(bls_df$state_id)
bls_df = laus_df
bls_df = bls_df %>%
dplyr::mutate(archive = lubridate::year(date)*100 + lubridate::month(date),
seasonal_code = substr(seriesID, 3, 3),
seasonal_code = ifelse( seasonal_code == "S",
"seasonally adjusted",
"unadjusted"),
state_code = substr(seriesID, 4, 18),
data_type_code = substr(seriesID, 19, 20))
bls_df = bls_df %>%
dplyr::left_join(y = laus_codes_list$state_codes %>%
filter(in_us_flag == 1),
by = c("state_code"="state_code")) %>%
dplyr::left_join(y = laus_codes_list$data_type_codes %>%
dplyr::rename(variable_name = description),
by = c("data_type_code" = "data_type_code"))
bls_df = bls_df %>%
dplyr::mutate(month = as.numeric(gsub("M", "", period))) %>%
dplyr::select(archive, month, period, seriesID, state_name, state_id,
variable_name, value, seasonal_code)
head(bls_df)
devtools::load_all()
laus_df = laus_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = "S",
states = c("ST0100000000000", "ST0200000000000"),
data_types = c("03"))
head(laus_df)
laus_df = laus_download(bls_key = Sys.getenv("BLS_KEY"),
adjustment = "S",
states = c("ST0100000000000", "ST0200000000000"),
data_types = c("03"))
laus_df = laus_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 1980,
end_year = 2000,
adjustment = "S",
states = c("ST0100000000000", "ST0200000000000"),
data_types = c("03"))
table(laus_df$archive)
laus_df = laus_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 1930,
end_year = 1950,
adjustment = "S",
states = c("ST0100000000000", "ST0200000000000"),
data_types = c("03"))
laus_df = laus_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 1970,
end_year = 1990,
adjustment = "S",
states = c("ST0100000000000", "ST0200000000000"),
data_types = c("03"))
table(laus_df$archive)
laus_codes_list$state_codes
laus_codes_list$data_type_codes
(laus_codes_list$state_codes %>%
filter(in_us_flag == 1))$state_code
laus_df = rbind(laus_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = start_year,
end_year = end_year,
adjustment = "S",
states = (laus_codes_list$state_codes %>%
filter(in_us_flag == 1))$state_code[1:25],
data_types = "03"),
laus_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = start_year,
end_year = end_year,
adjustment = "S",
states = (laus_codes_list$state_codes %>%
filter(in_us_flag == 1))$state_code[26:51],
data_types = "03"))
head(laus_df)
laus_df = laus_df %>%
mutate(state_urate = value) %>%
select(archive, state_id, state_urate)
head(laus_df)
# Parameters
start_year = 2000
end_year = 2019
adjustment = "S"
industries_emp = "00000000"
industries_wage = "05000000"
emp_data_type = "01"
wage_data_type = "03"
# Parameters
state_list_one = (ces_state_codes_list$state_codes %>% filter(in_us_flag == 1))$state_code[1:25]
state_list_two = (ces_state_codes_list$state_codes %>% filter(in_us_flag == 1))$state_code[26:51]
# Download nonfarm payroll data for states
ces_df = rbind(ces_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = start_year,
end_year = end_year,
adjustment = adjustment,
industries = industries_emp,
data_types = emp_data_type,
states = state_list_one),
ces_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = start_year,
end_year = end_year,
adjustment = adjustment,
industries = industries_emp,
data_types = emp_data_type,
states = state_list_two))
# Clean data for panel merging
ces_df = ces_df %>%
mutate(state_nfp = value,
year = floor(archive/100),
state_name = tolower(gsub(" ", "", state_name))) %>%
select(archive, year, month, state_name, state_id, state_nfp)
# Download private wage data for states
wes_df = rbind(ces_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = start_year,
end_year = end_year,
adjustment = "U",
industries = industries_wage,
data_types = wage_data_type,
states = state_list_one),
ces_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = start_year,
end_year = end_year,
adjustment = "U",
industries = industries_wage,
data_types = wage_data_type,
states = state_list_two))
# Clean data for panel merging
wes_df = wes_df %>%
mutate(state_avg_hrly_wage = value) %>%
select(archive, state_id, state_avg_hrly_wage)
# Download unemployment data for states
laus_df = rbind(laus_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = start_year,
end_year = end_year,
adjustment = "S",
states = (laus_codes_list$state_codes %>%
filter(in_us_flag == 1))$state_code[1:25],
data_types = "03"),
laus_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = start_year,
end_year = end_year,
adjustment = "S",
states = (laus_codes_list$state_codes %>%
filter(in_us_flag == 1))$state_code[26:51],
data_types = "03"))
# Clean the data
laus_df = laus_df %>%
mutate(state_urate = value) %>%
select(archive, state_id, state_urate)
# Load state GDP per-capita - data is until 2017 so forward it one year
gdp_pc_df = read_csv(file = "C:/Users/dsovich/Dropbox/Data/BEA/state_gdp_pc_annual.csv") %>%
melt(id.vars = "year", variable.name = "state_name", value.name = "state_gpd_pc") %>%
mutate(state_name = tolower(gsub(" ", "", state_name)),
year = year + 1)
# Load state GDP per-capita growth
gdp_gr_df = read_csv(file = paste("C:/Users/dsovich/Dropbox/Data/BEA/state_gdp_gr_annual.csv")) %>%
melt(id.vars = "year", variable.name = "state_name", value.name = "state_gdp_gr") %>%
mutate(state_name = tolower(gsub(" ", "", state_name)),
year = year+1)
# Combine into one data frame
state_df = ces_df %>%
left_join(y = wes_df,
by = c("archive"="archive", "state_id"="state_id")) %>%
left_join(y = laus_df,
by = c("archive" = "archive", "state_id" = "state_id")) %>%
left_join(y = gdp_pc_df,
by = c("year"="year", "state_name"="state_name")) %>%
left_join(y = gdp_gr_df,
by = c("year"="year", "state_name"="state_name"))
head(state_df %>% data.frame())
table(state_df$archive)
# Variable transformations
state_df = state_df %>%
arrange(state_id, month, archive) %>%
group_by(state_id, month) %>%
mutate(ly1_state_nfp = lag(state_nfp, 1),
ly2_state_nfp = lag(state_nfp, 2),
ly1_state_wage = lag(state_avg_hrly_wage, 1),
ly2_state_wage = lag(state_avg_hrly_wage, 2),
yoy_gr_state_nfp = (state_nfp / lag(state_nfp))-1,
yoy_gr_state_wage = (state_avg_hrly_wage / lag(state_avg_hrly_wage))-1) %>%
ungroup()
state_df = state_df %>%
arrange(state_id, archive) %>%
group_by(state_id) %>%
mutate(lm1_state_nfp = lag(state_nfp, 1),
lm2_state_nfp = lag(state_nfp, 2),
lm3_state_nfp = lag(state_nfp, 3),
lm1_state_wage = lag(state_avg_hrly_wage, 1),
lm2_state_wage = lag(state_avg_hrly_wage, 2),
lm3_state_wage = lag(state_avg_hrly_wage, 3),
lm1_state_urate = lag(state_urate, 1),
lm2_state_urate = lag(state_urate, 2),
lm3_state_urate = lag(state_urate, 3))
write_csv(state_df, path = "C:/Users/dsovich/Dropbox/Research/employment_prediction/data/state_df.csv")
# Download the CES employment data
ces_df = ces_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = start_year,
end_year = end_year,
adjustment = adjustment,
industries = industries_emp,
data_types = emp_data_type)
# Clean the data
ces_df = ces_df %>%
mutate(usa_nfp = value,
year = floor(archive/100)) %>%
select(archive, year, month, usa_nfp)
# Download the CES wage data
wes_df = ces_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = start_year,
end_year = end_year,
adjustment = adjustment,
industries = industries_wage,
data_types = wage_data_type)
# Clean the data
wes_df = wes_df %>%
mutate(usa_avg_hrly_wage = value) %>%
select(archive, usa_avg_hrly_wage)
# Download the JOLTS data on quits, hirings, and layofss
jolts_df = jolts_download(bls_key = Sys.getenv("BLS_KEY"),
start_year = 2010,
end_year = 2015,
adjustment = "S",
industries = "000000",
data_types = c("HI", "JO", "TS"),
data_levels = "L")
# Clean the data
jolts_df = jolts_df %>%
mutate(variable_name = ifelse(variable_name == "Hires",
"usa_hires",
ifelse(variable_name == "Job openings",
"usa_openings", "usa_separatoins"))) %>%
select(archive, variable_name, value) %>%
dcast(archive ~ variable_name)
usa_df = ces_df %>%
left_join(y = wes_df,
by = c("archive"="archive")) %>%
left_join(y = jolts_df,
by = c("archive"="archive"))
head(usa_df)
usa_df
head(usa_df, 30)
head(usa_df %>% data.frame(), 30)
jolts_df = jolts_download(bls_key = Sys.getenv("BLS_KEY"),
end_year = end_year,
start_year = start_year,
adjustment = "S",
industries = "000000",
data_types = c("HI", "JO", "TS"),
data_levels = "L")
jolts_df = jolts_df %>%
mutate(variable_name = ifelse(variable_name == "Hires",
"usa_hires",
ifelse(variable_name == "Job openings",
"usa_openings", "usa_separations"))) %>%
select(archive, variable_name, value) %>%
dcast(archive ~ variable_name)
usa_df = ces_df %>%
left_join(y = wes_df,
by = c("archive"="archive")) %>%
left_join(y = jolts_df,
by = c("archive"="archive"))
head(usa_df)
usa_df = usa_df %>%
arrange(month, archive) %>%
group_by(month) %>%
mutate(yoy_growth_usa_nfp = (usa_nfp / lag(usa_nfp)) - 1,
yoy_growth_usa_wage = (usa_avg_hrly_wage / lag(usa_avg_hrly_wage)) - 1,
yoy_growth_usa_hires = (usa_hires / lag(usa_hires)) - 1,
yoy_growth_usa_openings = (usa_openings / lag(usa_openings)) - 1,
yoy_growth_usa_separations = (usa_separations / lag(usa_separations)) - 1) %>%
ungroup()
write_csv(usa_df, path = "C:/Users/dsovich/Dropbox/Research/employment_prediction/data/usa_df.csv")
44-9
35*3
library(tidyverse)
library(blscrapeR)
library(lubridate)
library(reshape2)
library(devtools)
devtools::load_all("C:/Users/dsovich/Dropbox/Programming/Packages/blsr")
?ces_download
install.packages("sparklyr"
)
library(sparklyr)
spark_install(version = "2.1.0")
detectCores()
sc <- spark_connect(master = "local")
install.packages(c("nycflights13", "Lahman"))
library(dplyr)
iris_tbl <- copy_to(sc, iris)
flights_tbl <- copy_to(sc, nycflights13::flights, "flights")
batting_tbl <- copy_to(sc, Lahman::Batting, "batting")
src_tbls(sc)
head(flights_tbl)
flights_tbl %>% filter(day == 1)
object.size(flights_tbl)
object.size(flights)
flights %>% head()
flights %>% filter(day == 1)
class(flights)
a = ml_decision_tree(iris_tbl,
response = “Species", features =
c(“Petal_Length" , "Petal_Width"))
colnames(iris_tbl)
a = ml_decision_tree(iris_tbl,
response = “Species", features =
c(“Petal_Length" , "Petal_Width"))
a = ml_decision_tree(my_table,
response = "Species",
features = c("Petal_Length" , "Petal_Width"))
a = ml_decision_tree(iris_tbl,
response = "Species",
features = c("Petal_Length" , "Petal_Width"))
head(a)
names(a)
a$formula
alpha = predict(a, iris_tbl)
head(alpha)
object.size(alpha)
class(alpha)
class(iris_tbl)
class(a)
dim(iris_tbl)
nrow(iris_tbl)
head(iris_tbl)
library(DBI)
dbGetQuer(sc, "SELECT COUNT(*) FROM iris_tbl")
dbGetQuery(sc, "SELECT COUNT(*) FROM iris_tbl")
dbGetQuery(sc, "SELECT COUNT(*) FROM iris")
class9sc)
class(sc)
getwd()
data_feed_local = spark_read_csv(sc, name="data_feed",
path="C:/Users/dsovich/Dropbox/Programming/Packages/blsr/data-raw/seasonal_adjustment_definitions.csv", header=TRUE, delimiter="\t")
data_feed_local
class(data_feed_local)
object.size(data_feed_local)
readr::read_csv(file="./data-raw/seasonal_adjustment_definitions.csv")
a = readr::read_csv(file="./data-raw/seasonal_adjustment_definitions.csv")
object.size(a)
data_feed_local$seasonal_codedescription
data_feed_local = spark_read_csv(sc, name="data_feed",
path="C:/Users/dsovich/Dropbox/Programming/Packages/blsr/data-raw/seasonal_adjustment_definitions.csv", header=TRUE, delimiter=",")
data_feed_local
object.size(data_feed_local)
data_feed_local$seasonal_code
data_feed_local %>% collect()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tidyverse)
library(blscrapeR)
library(reshape2)
library(devtools)
devtools::load_all("C:/Users/dsovich/Dropbox/Programming/Packages/blsr")
devtools::load_all("C:/Users/dsovich/Dropbox/Programming/Packages/blsr")
devtools::load_all("C:/Users/dsovich/Dropbox/Programming/Packages/blsr")
rmarkdown::render("blsr.Rmd", output_format="pdf")
rmarkdown::render("./vignettes/blsr.Rmd", output_format="pdf")
rmarkdown::render("./vignettes/blsr.Rmd", output_format="all")
